!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);const o=4*Math.floor(54),i=Math.ceil(900/o)+1,r=Math.floor(11.25)+1;function l(t){let e=function(t){return{x:100*t.x/t.z,y:100*(t.y+-100)/t.z}}(t);return{x:280+e.x,y:260-e.y}}function a(t,e,n){const o={x:e.x,y:n.y,z:n.z},i={x:n.x,y:e.y,z:e.z},r=l(e),a=l(o),c=l(n),h=l(i);t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(a.x,a.y),t.lineTo(c.x,c.y),t.lineTo(h.x,h.y),t.fill()}const c=document.getElementById("canvas").getContext("2d"),h=[{name:"concrete",path:"images/concrete.png",width:120,height:80},{name:"concrete_far",path:"images/concrete_far.png",width:120,height:80},{name:"concrete_close",path:"images/concrete_close.png",width:240,height:160}],f=[{name:"forest_left",path:"images/forest_left.png",width:600,height:360},{name:"forest_right",path:"images/forest_right.png",width:600,height:360},{name:"ground",path:"images/ground.png",width:50,height:50}],d=new Map,u=new Map;function s(t){return new Promise((function(e,n){t.onload=function(){e(t)},t.onerror=n}))}function g(t,e,n){const o=l({x:0,y:0,z:1e3}).y;if(c.fillStyle="black",c.fillRect(0,0,560,o),c.fillStyle="black",c.fillRect(0,o,560,360-o),n){const n=t-280-105,o=t+280+105,i=d.get("forest_left");p(i,m,n,"forest_left"),m=w(m,i.width,e);const r=d.get("forest_right");p(r,x,o,"forest_right"),x=w(x,r.width,e)}!function(t){const e={x:t-210,y:0,z:100},n={x:t+210,y:0,z:1e3};c.fillStyle="black",a(c,e,n),c.fillStyle="white",a(c,{...e,x:e.x-10},{...e,z:1e3}),a(c,{...n,z:100},{...n,x:n.x+10})}(t)}const y=[];let m=0,x=0;function w(t,e,n){return(t+1*n)%e}function p(t,e,n,o){const i=l({x:n,y:0,z:100}),r=l({x:n,y:360,z:100}),a=l({x:n,y:0,z:1e3}),h=l({x:n,y:360,z:1e3}),f=Math.abs(h.x-r.x),u=(a.y-i.y)/(a.x-i.x),s=i.x<a.x?t.height:t.height-(360-a.y),g=t.data,y=t.width,m=t.height,x=d.get("ground"),w=x.data,p=x.width,z=x.height,M=n>0?n-p:n,v=new Uint8ClampedArray(g.length);for(let t=0;t<v.length;t+=4){const o=t/4%y;if(o>f)continue;const r=(t/4-o)/y,l=360-r-100;if(r>o*u+s){const r=-1e4/l,c=(n<0?o+i.x-280:o+a.x-280)*r/100,h=n<0?Math.floor(c-M):Math.floor(p-c+M);if(h<0||h>=p){v[t]=0,v[t+1]=0,v[t+2]=0,v[t+3]=255;continue}const f=4*(Math.floor(r-100+e)%z*p+h),d=h>10?Math.floor((h-10)/(p-10)*255):0;v[t]=w[f]-d,v[t+1]=w[f+1]-d,v[t+2]=w[f+2]-d,v[t+3]=w[f+3]}else{const i=100*n/(o+n-(n>0?f:0)),r=l*i/100- -100,a=(Math.floor(i-100)+e)%y;if(a<0||a>y){v[t]=0,v[t+1]=0,v[t+2]=0,v[t+3]=255;continue}const c=Math.floor(360-r);if(c<0||c>m){v[t+1]=0,v[t+2]=0,v[t+3]=255;continue}const h=4*(c*y+a);if(h>=v.length){v[t+1]=0,v[t+2]=0,v[t+3]=255;continue}v[t]=g[h],v[t+1]=g[h+1],v[t+2]=g[h+2],v[t+3]=g[h+3]}}const S=new ImageData(v,y,m);c.putImageData(S,Math.min(r.x,h.x),0,0,0,f,360)}function z(t,e){let n=e+10,o={x:e-10,y:0,z:Math.max(t,100)},i={x:n,y:0,z:Math.min(t+40,1e3)};c.fillStyle="white",a(c,o,i)}function M(t,e){return t<0?e-26.25-157.5:e+26.25}function v(t,e){return t<0?e-26.25:e+26.25+157.5}function S(t,e,n){let o=M(e,n),i=v(e,n);if(t<500){const n=e>0?o:i,r={x:n,y:0,z:t+10},a={x:n,y:78.75,z:t};c.fillStyle="khaki",function(t,e,n){const o={x:e.x,y:n.y,z:e.z},i={x:n.x,y:e.y,z:n.z},r=l(e),a=l(o),c=l(n),h=l(i);t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(a.x,a.y),t.lineTo(c.x,c.y),t.lineTo(h.x,h.y),t.fill()}(c,r,a);const h={x:o,y:78.75,z:t},f={x:i,y:78.75,z:t+10};c.fillStyle="khaki",function(t,e,n){const o={x:e.x,y:e.y,z:n.z},i={x:n.x,y:n.y,z:e.z},r=l(e),a=l(o),c=l(n),h=l(i);t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(a.x,a.y),t.lineTo(c.x,c.y),t.lineTo(h.x,h.y),t.fill()}(c,h,f)}const r=l({x:o,y:78.75,z:t}),a=l({x:i,y:0,z:t});t>600?c.drawImage(u.get("concrete_far"),r.x,r.y,a.x-r.x,a.y-r.y):t>300?c.drawImage(u.get("concrete"),r.x,r.y,a.x-r.x,a.y-r.y):c.drawImage(u.get("concrete_close"),r.x,r.y,a.x-r.x,a.y-r.y)}let b=[],I=[],_=0,E=0,T=0,O=0,k=60,D=0,B=0,P=0,L=0,W=-1;for(let t=0;t<r;t++)b.push(100+80*t);!function(){let t=550;for(;t<1e3;){Math.random()<.7&&I.push({z:t,position:Math.random()>.5?1:-1}),t+=o}let e=I.length;for(;e<i;)I.push({z:0,position:0}),e++}();let j=!1;var A;function H(t){const e=Date.now()-O+T,n=Math.floor(e/1e3);k=60-n,B=P,P=Date.now(),P-D>1e3&&(E=_,_=0,D=P);const i=(P-B)/1e3*60,r=4*i;L+=r;Math.abs(W-t)>.08&&(W+=.08*Math.sign(t-W)*i,W=Math.min(W,1),W=Math.max(W,-1));const l=105*W;if(function(t,e,n){const o=t[0];if(o.z>1&&o.z<100){const t=M(o.position,e),i=v(o.position,e);if(n>t-78.75&&n<i+78.75)return!0}return!1}(I,l,-l))return A.LOST;b=function(t,e){const n=new Array(t.length);for(let o=0;o<t.length;o++)n[o]=t[o]-e;if(n[0]<60){for(let e=0;e<t.length-1;e++)n[e]=t[e+1];const e=n[t.length-2]+40+40;n[t.length-1]=Math.min(e,1e3)}return n}(b,r),I=function(t,e){if(t[0].z<1)return t;const n=[...t];if(n[0].z<98){for(let t=0;t<n.length-1;t++)n[t]=n[t+1];n[n.length-1]={z:0,position:0}}for(let t=0;t<n.length;t++)n[t].z=n[t].z-e;return n}(I,r),_+=1,L>o&&(I=function(t){let e=t.length;for(let n=0;n<t.length;n++)if(t[n].z<1){e=n;break}if(e===t.length)return t;if(Math.random()>.7)return t;const n=[...t];return Math.random()<.5?n[e]={z:1e3,position:-1}:n[e]={z:1e3,position:1},n}(I),L=0),c.clearRect(0,0,560,360),g(l,Math.floor(1*i),j),function(){if(0===y.length)for(let t=0;t<8;t++)y.push({x:Math.floor(120+320*Math.random()),y:Math.floor(20+100*Math.random())});for(const t of y)c.fillStyle="white",c.fillRect(t.x,t.y,2,2)}();for(let t=b.length-1;t>=0;t--)z(b[t],l);for(let t=I.length-1;t>=0;t--)I[t].z>98&&S(I[t].z,I[t].position,l);let a="00";return k>9?a=String(k):k>0&&(a="0"+k),function(t,e){c.font="20px sans-serif",c.fillStyle=e?"green":"white",c.fillText(t,440,20,100)}("Время: "+a+"\r\nFPS: "+(E>9?E:"0"+E),k<10),k<=0?A.WON:A.OK}!function(t){t[t.OK=0]="OK",t[t.WON=1]="WON",t[t.LOST=2]="LOST"}(A||(A={}));let N=-1,R=!1;const C=()=>{const t=H(N);return t===A.WON?(document.removeEventListener("keydown",U),void(document.getElementById("won").hidden=!1)):t===A.LOST?(document.removeEventListener("keydown",U),void(document.getElementById("lost").hidden=!1)):void(R?T=Date.now()-O+T:window.requestAnimationFrame(()=>C()))};function F(){!function(){const t=Date.now();O=t,D=t,B=t,P=t}(),window.requestAnimationFrame(()=>C())}async function K(){if(window.screen.width<560){const t=document.getElementById("canvas"),e=document.getElementById("left-arrow"),n=document.getElementById("right-arrow"),o=window.innerWidth-e.width-n.width-10,i=window.innerHeight-10,r=t.width/t.height;let l=o/i>r?i:o/r;t.style.height=String(Math.floor(l))+"px",t.style.width=String(Math.floor(l*r))+"px",document.body.style.height=String(window.innerHeight)+"px",document.body.style.width=String(window.innerWidth)+"px",e.style.height=String(Math.floor(window.innerHeight/2))+"px",e.hidden=!1,e.addEventListener("click",(function(){N=1})),n.style.height=String(Math.floor(window.innerHeight/2))+"px",n.hidden=!1,n.addEventListener("click",(function(){N=-1}))}else{document.getElementById("manual").hidden=!1,j=!0}await function(){const t=h.map(t=>{const e=new Image(t.width,t.height);return e.src=t.path,s(e).then(e=>({name:t.name,image:e}))});return Promise.all(t).then(t=>{for(const e of t)u.set(e.name,e.image)})}(),await function(){const t=document.getElementById("canvas-tech"),e=t.getContext("2d"),n=f.map(t=>{const n=new Image(t.width,t.height);return n.src=t.path,s(n).then(n=>(e.drawImage(n,0,0),{name:t.name,imageData:e.getImageData(0,0,t.width,t.height)}))});return Promise.all(n).then(e=>{var n;for(const t of e)d.set(t.name,t.imageData);null===(n=t.parentNode)||void 0===n||n.removeChild(t)})}(),F()}function q(){return!(window.screen.width<560&&window.innerWidth<560&&window.innerWidth<window.innerHeight)}if(q())K();else{document.getElementById("horizontal-alert").hidden=!1}function U(t){if("ArrowRight"===t.code&&(t.preventDefault(),N=-1),"ArrowLeft"===t.code&&(t.preventDefault(),N=1),"Escape"===t.code){t.preventDefault(),R=!0,document.getElementById("paused").hidden=!1}if("Space"===t.code&&(t.preventDefault(),R)){document.getElementById("paused").hidden=!0,R=!1,F()}}window.addEventListener("resize",(function(){const t=document.getElementById("horizontal-alert");q()?(t.hidden=!0,R?(R=!1,F()):K()):(R=!0,t.hidden=!1)})),document.addEventListener("keydown",U)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,